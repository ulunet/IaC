{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleCompanyPrefix": {
            "maxLength": 10,
            "type": "String",
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "managementSubscriptionId": {
            "defaultValue": "",
            "maxLength": 36,
            "type": "String",
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "defaultValue": "",
            "maxLength": 36,
            "type": "String",
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "identitySubscriptionId": {
            "defaultValue": "",
            "maxLength": 36,
            "type": "String",
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyRdpForIdentity": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyPipForIdentity": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableVmBackupForIdentity": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "onlineLzSubscriptionId": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corpLzSubscriptionId": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "corpConnectedLzSubscriptionId": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones and connect to virtual networking hub."
            }
        },
        "enableLogAnalytics": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String",
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "retentionInDays": {
            "defaultValue": "",
            "type": "String"
        },
        "enableAsc": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String",
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAksPolicy": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "emailContactAsc": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Email address for Microsoft Defender for Cloud contact details."
            }
        },
        "enableAscForServers": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ],
            "type": "String"
        },
        "enableAscForAppServices": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForStorage": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForSql": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForSqlOnVm": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForKeyVault": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForArm": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForDns": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForContainers": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "enableAscForOssDb": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "type": "String"
        },
        "denyAksPrivileged": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyAksPrivilegedEscalation": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyHttpIngressForAks": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableVmMonitoring": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String",
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String",
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableSecuritySolution": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableEncryptionInTransit": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableAgentHealth": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableChangeTracking": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableUpdateMgmt": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableActivityLog": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableVmInsights": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableServiceMap": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableSqlAssessment": {
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableSqlAudit": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableSqlEncryption": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableVmBackup": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyRdp": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyPublicEndpoints": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableStorageHttps": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enableLzDdoS": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyIpForwarding": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denySubnetWithoutNsg": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "addressPrefix": {
            "defaultValue": "",
            "type": "String"
        },
        "enableVpnGw": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableErGw": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "location": {
            "defaultValue": "[deployment().location]",
            "type": "String"
        },
        "enableHub": {
            "defaultValue": "No",
            "allowedValues": [
                "vhub",
                "vwan",
                "nva",
                "No"
            ],
            "type": "String"
        },
        "enableAzFw": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableAzFwDnsProxy": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enableDdoS": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "enablePrivateDnsZones": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "enablePrivateDnsZonesForLzs": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "subnetMaskForAzFw": {
            "defaultValue": "",
            "type": "String"
        },
        "subnetMaskForGw": {
            "defaultValue": "",
            "type": "String"
        },
        "gwRegionalOrAz": {
            "defaultValue": "",
            "type": "String"
        },
        "gwAzSku": {
            "defaultValue": "",
            "type": "String"
        },
        "gwRegionalSku": {
            "defaultValue": "",
            "type": "String"
        },
        "erRegionalOrAz": {
            "defaultValue": "",
            "type": "String"
        },
        "erAzSku": {
            "defaultValue": "",
            "type": "String"
        },
        "erRegionalSku": {
            "defaultValue": "",
            "type": "String"
        },
        "firewallSku": {
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "type": "String"
        },
        "firewallZones": {
            "defaultValue": [],
            "type": "Array"
        },
        "paToken": {
            "defaultValue": "",
            "type": "SecureString"
        },
        "principalId": {
            "defaultValue": [],
            "type": "Array"
        },
        "appId": {
            "defaultValue": "",
            "type": "String"
        },
        "principalSecret": {
            "defaultValue": "",
            "type": "SecureString"
        },
        "gitHubUserNameOrOrg": {
            "defaultValue": "",
            "type": "String"
        },
        "repositoryName": {
            "defaultValue": "",
            "type": "String"
        },
        "enableAzOps": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String"
        },
        "subscriptionId": {
            "defaultValue": "",
            "maxLength": 36,
            "type": "String"
        },
        "singlePlatformSubscriptionId": {
            "defaultValue": "",
            "maxLength": 36,
            "type": "String"
        },
        "expressRouteScaleUnit": {
            "defaultValue": "1",
            "type": "String"
        },
        "vpnGateWayScaleUnit": {
            "defaultValue": "1",
            "type": "String"
        },
        "identityAddressPrefix": {
            "defaultValue": "",
            "type": "String"
        },
        "denyDatabricksPip": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyDatabricksVnet": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "denyDatabricksSku": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "type": "String"
        },
        "telemetryOptOut": {
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "type": "String",
            "metadata": {
                "description": "The customer usage identifier used for telemetry purposes. The default value of False enables telemetry. The value of True disables telemetry."
            }
        }
    },
    "variables": {
        "mgmtGroups": {
            "eslzRoot": "[parameters('enterpriseScaleCompanyPrefix')]",
            "platform": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'platform')]",
            "management": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'management')]",
            "connectivity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'connectivity')]",
            "identity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'identity')]",
            "lzs": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'online')]"
        },
        "scopes": {
            "eslzRootManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').eslzRoot)]",
            "platformManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').platform)]",
            "managementManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').management)]",
            "connectivityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').connectivity)]",
            "identityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').identity)]",
            "lzsManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').lzs)]",
            "corpManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').corp)]",
            "onlineManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').online)]"
        },
        "azPrivateDnsPolicyMapping": {
            "https://management.azure.com/": "managementGroupTemplates/policyDefinitions/DINE-PrivateDNSZonesPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxDINE-PrivateDNSZonesPolicySetDefinition.json"
        },
        "azPrivateDnsArmTemplate": "[variables('azPrivateDnsPolicyMapping')[environment().resourceManager]]",
        "azPublicEndpointsPolicyMapping": {
            "https://management.azure.com/": "managementGroupTemplates/policyDefinitions/DENY-PublicEndpointsPolicySetDefinition.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxDENY-PublicEndpointsPolicySetDefinition.json"
        },
        "azPublicEndpointArmTemplate": "[variables('azPublicEndpointsPolicyMapping')[environment().resourceManager]]",
        "azPolicyPoliciesMapping": {
            "https://management.azure.com/": "managementGroupTemplates/policyDefinitions/policies.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyDefinitions/gov/fairfaxPolicies.json"
        },
        "azPolicyArmTemplate": "[variables('azPolicyPoliciesMapping')[environment().resourceManager]]",
        "azPrivateDnsPolicyAssignmentMapping": {
            "https://management.azure.com/": "managementGroupTemplates/policyAssignments/DINE-PrivateDNSZonesPolicyAssignment.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyAssignments/gov/fairfaxDINE-PrivateDNSZonesPolicyAssignment.json"
        },
        "azPrivateDnsPolicyAssignment": "[variables('azPrivateDnsPolicyAssignmentMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/mgmtGroupStructure/mgmtGroups.json')]",
            "managementGroupsLite": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/mgmtGroupStructure/mgmtGroupsLite.json')]",
            "policyDefinitions": "[uri(deployment().properties.templateLink.uri, variables('azPolicyArmTemplate'))]",
            "dataPolicyDefinitions": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyDefinitions/dataPolicies.json')]",
            "vnetConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/hubspoke-connectivity.json')]",
            "vwanConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vwan-connectivity.json')]",
            "nvaConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/nvahubspoke-connectivity.json')]",
            "subscriptionPlacement": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/subscriptionOrganization/subscriptionOrganization.json')]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/logAnalyticsWorkspace.json')]",
            "azOpsRBAC": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/roleAssignments/azOpsRoleAssignment.json')]",
            "resourceGroup": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/resourceGroup.json')]",
            "ddosProtection": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/ddosProtection.json')]",
            "azOpsSetup": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/azOpsArm.json')]",
            "logAnalyticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-LogAnalyticsPolicyAssignment.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/logAnalyticsSolutions.json')]",
            "asbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ASBPolicyAssignment.json')]",
            "resourceDiagnosticsInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ResourceDiagnosticsPolicyAssignment.json')]",
            "activityDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ActivityLogPolicyAssignment.json')]",
            "mdfcConfigPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-MDFCConfigPolicyAssignment.json')]",
            "azVmMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMMonitoringPolicyAssignment.json')]",
            "azVmssMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMSSMonitoringPolicyAssignment.json')]",
            "azVmBackupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMBackupPolicyAssignment.json')]",
            "azPolicyForAksPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-AksPolicyPolicyAssignment.json')]",
            "aksPrivEscalationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksPrivEscalationPolicyAssignment.json')]",
            "aksPrivilegedPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksPrivilegedPolicyAssignment.json')]",
            "tlsSslPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-DINE-APPEND-TLS-SSL-PolicyAssignment.json')]",
            "aksHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksWithoutHttpsPolicyAssignment.json')]",
            "ipFwdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-IPForwardingPolicyAssignment.json')]",
            "publicEndpointPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPublicEndpointArmTemplate'))]",
            "publicEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-PublicEndpointPolicyAssignment.json')]",
            "privateDnsZonePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsArmTemplate'))]",
            "privateDnsZonePolicyAssignment": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsPolicyAssignment'))]",
            "pipPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-PublicIpAddressPolicyAssignment.json')]",
            "rdpFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-RDPFromInternetPolicyAssignment.json')]",
            "storageHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-StorageWithoutHttpsPolicyAssignment.json')]",
            "subnetNsgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-SubnetWithoutNsgPolicyAssignment.json')]",
            "sqlAuditPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-SQLAuditingPolicyAssignment.json')]",
            "sqlEncryptionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-SQLEncryptionPolicyAssignment.json')]",
            "ddosPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/MODIFY-DDoSPolicyAssignment.json')]",
            "corpVnetPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeering.json')]",
            "corpVwanPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeeringVwan.json')]",
            "privateDnsZones": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/privateDnsZones.json')]",
            "roleAssignments": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/roleAssignments/roleAssignment.json')]",
            "databricksSku": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-DatabricksSkuPolicyAssignment.json')]",
            "databricksPip": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-DatabricksPipPolicyAssignment.json')]",
            "databricksVnet": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-DatabricksVnetPolicyAssignment.json')]",
            "govMdfcPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/gov/fairfaxDINE-MDFCConfigPolicyAssignment.json')]"
        },
        "deploymentSuffix": "[concat('-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix')))]",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat('EntScale-Mgs', variables('deploymentSuffix')), 64)]",
            "mgmtSubscriptionPlacement": "[take(concat('EntScale-MgmtSub', variables('deploymentSuffix')), 64)]",
            "databricksSkuDeploymentName": "[take(concat('EntScale-DBSku', variables('deploymentSuffix')), 64)]",
            "databricksPipDeploymentName": "[take(concat('EntScale-DBPip', variables('deploymentSuffix')), 64)]",
            "databricksVnetDeploymentName": "[take(concat('EntScale-DBVnet', variables('deploymentSuffix')), 64)]",
            "corpPeeringDeploymentName": "[take(concat('EntScale-CorpPeering', variables('deploymentSuffix')), 60)]",
            "connectivitySubscriptionPlacement": "[take(concat('EntScale-ConnectivitySub', variables('deploymentSuffix')), 64)]",
            "identitySubscriptionPlacement": "[take(concat('EntScale-IdentitySub', variables('deploymentSuffix')), 64)]",
            "policyDeploymentName": "[take(concat('EntScale-Policy', variables('deploymentSuffix')), 64)]",
            "dataPolicyDeploymentName": "[take(concat('EntScale-Data-Policy', variables('deploymentSuffix')), 64)]",
            "azOpsRbacDeploymentName": "[take(concat('EntScale-AzOpsRbac', variables('deploymentSuffix')), 64)]",
            "azOpsRgDeploymentName": "[take(concat('EntScale-AzOpsRg', variables('deploymentSuffix')), 64)]",
            "ddosRgDeploymentName": "[take(concat('EntScale-DDoSRg', variables('deploymentSuffix')), 64)]",
            "ddosDeploymentName": "[take(concat('EntScale-DDoS', variables('deploymentSuffix')), 64)]",
            "ddosHubPolicyDeploymentName": "[take(concat('EntScale-DDoSHubPolicy', variables('deploymentSuffix')), 64)]",
            "ddosLzPolicyDeploymentName": "[take(concat('EntScale-DDoSLZPolicy', variables('deploymentSuffix')), 64)]",
            "azOpsSetupDeploymentName": "[take(concat('EntScale-AzOpsSetup', variables('deploymentSuffix')), 64)]",
            "monitoringDeploymentName": "[take(concat('EntScale-Monitoring', variables('deploymentSuffix')), 64)]",
            "logAnalyticsPolicyDeploymentName": "[take(concat('EntScale-LAPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat('EntScale-Solutions', variables('deploymentSuffix')), 64)]",
            "asbPolicyDeploymentName": "[take(concat('EntScale-ASB', variables('deploymentSuffix')), 64)]",
            "resourceDiagnosticsPolicyDeploymentName": "[take(concat('EntScale-ResourceDiagnostics', variables('deploymentSuffix')), 64)]",
            "activityDiagnosticsPolicyDeploymentName": "[take(concat('EntScale-ActivityDiagnostics', variables('deploymentSuffix')), 64)]",
            "ascPolicyDeploymentName": "[take(concat('EntScale-ASC', variables('deploymentSuffix')), 64)]",
            "ascGovPolicyDeploymentName": "[take(concat('EntScale-Gov-ASC', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubDeploymentName": "[take(concat('EntScale-HubSpoke', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubDeploymentName": "[take(concat('EntScale-VWanHub', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubDeploymentName": "[take(concat('EntScale-NVAHub', variables('deploymentSuffix')), 64)]",
            "azVmMonitorPolicyDeploymentName": "[take(concat('EntScale-AzVmMonitor', variables('deploymentSuffix')), 64)]",
            "azVmssMonitorPolicyDeploymentName": "[take(concat('EntScale-AzVmssMonitor', variables('deploymentSuffix')), 64)]",
            "azBackupLzPolicyDeploymentName": "[take(concat('EntScale-AzBackupLz', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityPolicyDeploymentName": "[take(concat('EntScale-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "azPolicyForAksPolicyDeploymentName": "[take(concat('EntScale-AksPolicy', variables('deploymentSuffix')), 64)]",
            "aksPrivEscalationPolicyDeploymentName": "[take(concat('EntScale-AksPrivEsc', variables('deploymentSuffix')), 64)]",
            "aksHttpsPolicyDeploymentName": "[take(concat('EntScale-AksHttps', variables('deploymentSuffix')), 64)]",
            "aksPrivilegedPolicyDeploymentName": "[take(concat('EntScale-AksPrivileged', variables('deploymentSuffix')), 64)]",
            "tlsSslPolicyDeploymentName": "[take(concat('EntScale-TLSSSL', variables('deploymentSuffix')), 64)]",
            "ipFwPolicyDeploymentName": "[take(concat('EntScale-IPFwd', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDeploymentName": "[take(concat('EntScale-PEndpoint', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDefinitionName": "[take(concat('EntScale-Policy-PEndpoints', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDefinitionName": "[take(concat('EntScale-Policy-PrivateDns', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDeploymentName": "[take(concat('EntScale-PrivDNSAssignment', variables('deploymentSuffix')), 64)]",
            "pipPolicyDeploymentName": "[take(concat('EntScale-PIP', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetPolicyDeploymentName": "[take(concat('EntScale-RDP', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetIdentityPolicyDeploymentName": "[take(concat('EntScale-RDPIdentity', variables('deploymentSuffix')), 64)]",
            "storageHttpsPolicyDeploymentName": "[take(concat('EntScale-StorageHttps', variables('deploymentSuffix')), 64)]",
            "subnetNsgPolicyDeploymentName": "[take(concat('EntScale-SubnetNsg', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityPolicyDeploymentName": "[take(concat('EntScale-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "sqlAuditPolicyDeploymentName": "[take(concat('EntScale-SqlAudit', variables('deploymentSuffix')), 64)]",
            "sqlEncryptionPolicyDeploymentName": "[take(concat('EntScale-SqlEncrypt', variables('deploymentSuffix')), 64)]",
            "onlineLzSubs": "[take(concat('EntScale-OnlineLzs', variables('deploymentSuffix')), 60)]",
            "corpLzSubs": "[take(concat('EntScale-CorpLzs', variables('deploymentSuffix')), 60)]",
            "corpConnectedMoveLzSubs": "[take(concat('EntScale-CorpConnLzs', variables('deploymentSuffix')), 50)]",
            "corpConnectedLzSubs": "[take(concat('EntScale-CorpPeering', variables('deploymentSuffix')), 50)]",
            "privateDnsZoneRgDeploymentName": "[take(concat('EntScale-PrivDNSRG', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesDeploymentName": "[take(concat('EntScale-PrivDNSZones', variables('deploymentSuffix')), 35)]",
            "dnsZoneRoleAssignmentDeploymentName": "[take(concat('EntScale-DNSZoneRole', variables('deploymentSuffix')), 64)]",
            "identityPeeringDeploymentName": "[take(concat('EntScale-IDPeering', variables('deploymentSuffix')), 64)]",
            "identityVwanPeeringDeploymentName": "[take(concat('EntScale-IDVwanPeering', variables('deploymentSuffix')), 64)]",
            "corpConnectedLzVwanSubs": "[take(concat('EntScale-CorpConnLzsVwan', variables('deploymentSuffix')), 50)]",
            "pidCuaDeploymentName": "[take(concat('pid-', variables('cuaid'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'))), 64)]"
        },
        "esLiteDeploymentNames": {
            "mgmtGroupLiteDeploymentName": "[take(concat('EntScale-MgsLite', variables('deploymentSuffix')), 64)]",
            "rdpFromInternetIdentityLitePolicyDeploymentName": "[take(concat('EntScale-RDPIdentity', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityLitePolicyDeploymentName": "[take(concat('EntScale-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityLitePolicyDeploymentName": "[take(concat('EntScale-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "monitoringLiteDeploymentName": "[take(concat('EntScale-MonitoringLite', variables('deploymentSuffix')), 64)]",
            "logAnalyticsLitePolicyDeploymentName": "[take(concat('EntScale-LAPolicyLite', variables('deploymentSuffix')), 64)]",
            "monitoringSolutionsLiteDeploymentName": "[take(concat('EntScale-SolutionsLite', variables('deploymentSuffix')), 64)]",
            "platformLiteSubscriptionPlacement": "[take(concat('EntScale-PlatformSubLite', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubLiteDeploymentName": "[take(concat('EntScale-VnetHubLite', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubLiteDeploymentName": "[take(concat('EntScale-VWanHubLite', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubLiteDeploymentName": "[take(concat('EntScale-NVAHubLite', variables('deploymentSuffix')), 64)]",
            "azOpsSetupLiteDeploymentName": "[take(concat('EntScale-AzOpsSetupLite', variables('deploymentSuffix')), 64)]",
            "azOpsRbacLiteDeploymentName": "[take(concat('EntScale-AzOpsRbacLite', variables('deploymentSuffix')), 64)]",
            "azOpsRgLiteDeploymentName": "[take(concat('EntScale-AzOpsRgLite', variables('deploymentSuffix')), 64)]",
            "ddosRgLiteDeploymentName": "[take(concat('EntScale-DDoSRgLite', variables('deploymentSuffix')), 64)]",
            "ddosLiteDeploymentName": "[take(concat('EntScale-DDoSLite', variables('deploymentSuffix')), 64)]",
            "ddosHubLitePolicyDeploymentName": "[take(concat('EntScale-DDoSHubPolicyLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZoneRgLiteDeploymentName": "[take(concat('EntScale-PrivDNSRGLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesLiteDeploymentName": "[take(concat('EntScale-PrivDNSLite', variables('deploymentSuffix')), 35)]"
        },
        "platformRgNames": {
            "mgmtRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-mgmt')]",
            "azOpsRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-azops')]",
            "connectivityRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('location'))]",
            "ddosRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ddos')]",
            "privateDnsRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-privatedns')]",
            "identityVnetRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('location'))]",
            "lzVnetRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('location'))]"
        },
        "platformResourceNames": {
            "logAnalyticsWorkspace": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-law')]",
            "automationAccount": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-aauto')]",
            "vpnGwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vpngw-', parameters('location'))]",
            "erGwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ergw-', parameters('location'))]",
            "ddosName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ddos-', parameters('location'))]",
            "azFwPolicyName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-azfwpolicy-', parameters('location'))]",
            "azFwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-fw-', parameters('location'))]",
            "azErGwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-erpip-', parameters('location'))]",
            "hubName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-hub-', parameters('location'))]",
            "vwanName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vwan-', parameters('location'))]",
            "azVpnGwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-gwpip-', parameters('location'))]",
            "azFwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-fwpip-', parameters('location'))]",
            "identityVnet": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('location'))]",
            "lzVnet": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('location'))]"
        },
        "azOpsSubscriptionId": "[if(empty(parameters('subscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('subscriptionId'))]",
        "singleVsDedicatedMgmtSub": "[if(empty(parameters('managementSubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('managementSubscriptionId'))]",
        "singleVsDedicatedConnectivitySub": "[if(empty(parameters('connectivitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('connectivitySubscriptionId'))]",
        "singleVsDedicatedIdentitySub": "[if(empty(parameters('identitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('identitySubscriptionId'))]",
        "platformResourceIds": {
            "logAnalyticsResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.OperationalInsights/workspaces/', variables('platformResourceNames').logAnalyticsWorkspace)]",
            "automationResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Automation/automationAccounts/', variables('platformResourceNames').automationAccount)]",
            "ddosProtectionResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').ddosRg, '/providers/Microsoft.Network/ddosProtectionPlans/', variables('platformResourceNames').ddosName)]",
            "vNetHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualNetworks/', variables('platformResourceNames').hubName)]",
            "vWanHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualHubs/', variables('platformResourceNames').hubName)]",
            "privateDnsRgResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').privateDnsRg)]",
            "azFirewallResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwName)]"
        },
        "deterministicRoleAssignmentGuids": {
            "ddosForConnectivity": "[take(guid(concat(parameters('enterpriseScaleCompanyPrefix'), 'ddos')), 10)]",
            "backupForIdentity": "[take(guid(concat(parameters('enterpriseScaleCompanyPrefix'), 'idbackup')), 10)]"
        },
        "privateDnsZones": [
            "privatelink.azure-automation.net",
            "privatelink.database.windows.net",
            "privatelink.sql.azuresynapse.net",
            "privatelink.dev.azuresynapse.net",
            "privatelink.azuresynapse.net",
            "privatelink.blob.core.windows.net",
            "privatelink.table.core.windows.net",
            "privatelink.queue.core.windows.net",
            "privatelink.file.core.windows.net",
            "privatelink.web.core.windows.net",
            "privatelink.dfs.core.windows.net",
            "privatelink.documents.azure.com",
            "privatelink.mongo.cosmos.azure.com",
            "privatelink.cassandra.cosmos.azure.com",
            "privatelink.gremlin.cosmos.azure.com",
            "privatelink.table.cosmos.azure.com",
            "[concat('privatelink.', parameters('location'), '.batch.azure.com')]",
            "privatelink.postgres.database.azure.com",
            "privatelink.mysql.database.azure.com",
            "privatelink.mariadb.database.azure.com",
            "privatelink.vaultcore.azure.net",
            "privatelink.managedhsm.azure.net",
            "[concat('privatelink.', parameters('location'), '.azmk8s.io')]",
            "privatelink.search.windows.net",
            "privatelink.azurecr.io",
            "privatelink.azconfig.io",
            "[concat('privatelink.', parameters('location'), '.backup.windowsazure.com')]",
            "privatelink.siterecovery.windowsazure.com",
            "privatelink.servicebus.windows.net",
            "privatelink.azure-devices.net",
            "privatelink.eventgrid.azure.net",
            "privatelink.azurewebsites.net",
            "privatelink.api.azureml.ms",
            "privatelink.notebooks.azure.net",
            "privatelink.service.signalr.net",
            "privatelink.monitor.azure.com",
            "privatelink.oms.opinsights.azure.com",
            "privatelink.ods.opinsights.azure.com",
            "privatelink.agentsvc.azure-automation.net",
            "privatelink.cognitiveservices.azure.com",
            "privatelink.afs.azure.net",
            "privatelink.datafactory.azure.net",
            "privatelink.adf.azure.com",
            "privatelink.redis.cache.windows.net",
            "privatelink.redisenterprise.cache.azure.net",
            "privatelink.purview.azure.com",
            "privatelink.purviewstudio.azure.com",
            "privatelink.digitaltwins.azure.net",
            "privatelink.azurehdinsight.net",
            "privatelink.his.arc.azure.com",
            "privatelink.guestconfiguration.azure.com",
            "privatelink.media.azure.net"
        ],
        "roleDefinitions": {
            "networkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7"
        },
        "cuaid": "35c42e79-00b3-42eb-a9ac-e542953efb3c"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            },
            "condition": "[empty(parameters('singlePlatformSubscriptionId'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            },
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDefinitionName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicySetDefinition]"
                },
                "parameters": {}
            },
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicySetDefinition]"
                },
                "parameters": {}
            },
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dataPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataPolicyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            },
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat('preparingToLaunch', copyIndex())]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
                "[variables('deploymentNames').publicEndpointPolicyDefinitionName]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            },
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "copy": {
                "name": "policyCompletion",
                "count": 30,
                "mode": "Serial",
                "batchSize": 1
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtSubscriptionPlacement]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').management]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            },
            "scope": "[variables('scopes').managementManagementGroup]",
            "condition": "[not(empty(parameters('managementSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').connectivitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            },
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').identitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').identity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            },
            "scope": "[variables('scopes').identityManagementGroup]",
            "condition": "[not(empty(parameters('identitySubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            },
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            },
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "condition": "[and(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logAnalyticsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            },
            "scope": "[variables('scopes').managementManagementGroup]",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').asbPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').asbPolicyInitiative]"
                },
                "parameters": {}
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceDiagnosticsInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').activityDiagnosticsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').activityDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mdfcConfigPolicyInitiative]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "enableAscForOssDb": {
                        "value": "[parameters('enableAscForOssDb')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascGovPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').govMdfcPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.usgovcloudapi.net'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosRgDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosHubPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "condition": "[and(or(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').vnetConnectivityHubDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            },
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').nvaConnectivityHubDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            },
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'nva'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').vwanConnectivityHubDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            },
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').privateDnsZoneRgDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').privateDnsZonesDeploymentName, copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    }
                }
            },
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "copy": {
                "name": "dnsZones",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azOpsRbacDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azOpsRBAC]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[parameters('principalId')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azOpsRgDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azOpsRbacDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').azOpsRg]"
                    },
                    "location": {
                        "value": "[deployment().location]"
                    }
                }
            },
            "subscriptionId": "[variables('azOpsSubscriptionId')]",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azOpsSetupDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azOpsRbacDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azOpsRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').monitoringSolutionsLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringSolutionsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "corpLzs",
                "onlineLzs"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azOpsSetup]"
                },
                "parameters": {
                    "paToken": {
                        "value": "[parameters('paToken')]"
                    },
                    "principalSecret": {
                        "value": "[parameters('principalSecret')]"
                    },
                    "gitHubUserNameOrOrg": {
                        "value": "[parameters('gitHubUserNameOrOrg')]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "appId": {
                        "value": "[parameters('appId')]"
                    },
                    "repositoryName": {
                        "value": "[parameters('repositoryName')]"
                    }
                }
            },
            "subscriptionId": "[variables('azOpsSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').azOpsRg]",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]",
                "dnsZones",
                "dnsZonesLite",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsPolicyDefinitionName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "dnsZoneResourceGroupId": {
                        "value": "[variables('platformResourceIds').privateDnsRgResourceId]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "condition": "[or(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), equals(parameters('enablePrivateDnsZonesForLzs'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dnsZoneRoleAssignmentDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[variables('deploymentNames').privateDnsPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), reference(variables('deploymentNames').privateDnsPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "[variables('roleDefinitions').networkContributor]"
                    }
                }
            },
            "subscriptionId": "[variables('singleVsDedicatedConnectivitySub')]",
            "condition": "[equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmMonitorPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmssMonitorPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmssMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmssMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmssMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupLzPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmBackup'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableVmBackup'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosLzPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableLzDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[and(or(equals(parameters('enableLzDdoS'), 'Yes'), equals(parameters('enableLzDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksPipDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksPip]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksPip'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "condition": "[or(equals(parameters('denyDatabricksPip'), 'Yes'), equals(parameters('denyDatabricksPip'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksSkuDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksSku]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksSku'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "condition": "[or(equals(parameters('denyDatabricksSku'), 'Yes'), equals(parameters('denyDatabricksSku'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').databricksVnetDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataPolicyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').databricksVnet]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyDatabricksVnet'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "condition": "[or(equals(parameters('denyDatabricksVnet'), 'Yes'), equals(parameters('denyDatabricksVnet'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azPolicyForAksPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azPolicyForAksPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableaksPolicy'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('enableAksPolicy'), 'Yes'), equals(parameters('enableAksPolicy'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivEscalationPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivEscalationPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyAksPrivilegedEscalation'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivilegedPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivilegedPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivileged'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksHttpsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyHttpIngressForAks'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('denyHttpIngressForAks'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').tlsSslPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').tlsSslPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableEncryptionInTransit'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[or(equals(parameters('enableEncryptionInTransit'), 'Yes'), equals(parameters('enableEncryptionInTransit'), 'Audit'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ipFwPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ipFwdPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('denyIpForwarding'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "condition": "[equals(parameters('denyPublicEndpoints'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('denyRdp'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').storageHttpsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').storageHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('enableStorageHttps'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('denySubnetWithoutNsg'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlAuditPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlAuditPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlEncryptionPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlEncryptionPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').lzsManagementGroup]",
            "condition": "[equals(parameters('enableSqlEncryption'), 'Yes')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupIdentityPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').identityManagementGroup]",
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').identityManagementGroup]",
            "condition": "[and(equals(parameters('denyPipForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgIdentityPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').identityManagementGroup]",
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetIdentityPolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').identityManagementGroup]",
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeeringDeploymentName]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            },
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('identityAddressPrefix'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeeringDeploymentName]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            },
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('identityAddressPrefix'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').onlineLzSubs, copyIndex())]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').online]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('onlineLzSubscriptionId')[copyIndex()])]"
                    }
                }
            },
            "scope": "[variables('scopes').onlineManagementGroup]",
            "copy": {
                "name": "onlineLzs",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpLzSubs, copyIndex())]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('corpLzSubscriptionId')[copyIndex()])]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "copy": {
                "name": "corpLzs",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpConnectedMoveLzSubs, copyIndex())]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs]"
                    }
                }
            },
            "scope": "[variables('scopes').corpManagementGroup]",
            "copy": {
                "name": "corpConnectedMoveLzs",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "condition": "[not(empty(parameters('corpConnectedLzSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpPeeringDeploymentName, copyIndex())]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '-', variables('platformResourceNames').lzVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            },
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "copy": {
                "name": "corpConnectedPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('corpConnectedLzSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroupsLite]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            },
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').monitoringLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esliteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').monitoringSolutionsLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "condition": "[and(and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').logAnalyticsLitePolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosRgLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosRgLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('esLitedeploymentNames').privateDnsZonesLiteDeploymentName, copyIndex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    }
                }
            },
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "copy": {
                "name": "dnsZonesLite",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(and(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableHub'), 'Yes'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "[variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'nva'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').azBackupIdentityLitePolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').subnetNsgIdentityLitePolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').rdpFromInternetIdentityLitePolicyDeploymentName]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            },
            "scope": "[variables('scopes').platformManagementGroup]",
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            },
            "condition": "[equals(parameters('telemetryOptOut'), 'No')]"
        }
    ],
    "outputs": {
        "deployment": {
            "type": "String",
            "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
        }
    }
}
